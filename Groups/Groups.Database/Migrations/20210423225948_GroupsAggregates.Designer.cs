// <auto-generated />
using System;
using Groups.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Groups.Database.Migrations
{
    [DbContext(typeof(GroupsDbContext))]
    [Migration("20210423225948_GroupsAggregates")]
    partial class GroupsAggregates
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Groups.Domain.Aggregates.GroupAggregate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("GroupAggregate");
                });

            modelBuilder.Entity("Groups.Domain.Aggregates.TestAggregate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PassedFrom")
                        .HasColumnType("int");

                    b.Property<bool>("RequirePhoto")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("TestAggregate");
                });

            modelBuilder.Entity("Groups.Domain.Aggregates.GroupAggregate", b =>
                {
                    b.OwnsOne("Groups.Domain.ValueObjects.GroupName", "GroupName", b1 =>
                        {
                            b1.Property<Guid>("GroupAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("GroupName");

                            b1.HasKey("GroupAggregateId");

                            b1.ToTable("GroupAggregate");

                            b1.WithOwner()
                                .HasForeignKey("GroupAggregateId");
                        });

                    b.OwnsMany("Groups.Domain.ValueObjects.Participient", "Participients", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("GroupId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Role")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Role");

                            b1.HasKey("Id");

                            b1.HasIndex("GroupId");

                            b1.ToTable("Participient");

                            b1.WithOwner()
                                .HasForeignKey("GroupId");

                            b1.OwnsOne("Core.Domain.ValueObjects.Email", "Email", b2 =>
                                {
                                    b2.Property<Guid>("ParticipientId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("EmailAddress")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("Email");

                                    b2.HasKey("ParticipientId");

                                    b2.ToTable("Participient");

                                    b2.WithOwner()
                                        .HasForeignKey("ParticipientId");
                                });

                            b1.Navigation("Email")
                                .IsRequired();
                        });

                    b.Navigation("GroupName")
                        .IsRequired();

                    b.Navigation("Participients");
                });

            modelBuilder.Entity("Groups.Domain.Aggregates.TestAggregate", b =>
                {
                    b.HasOne("Groups.Domain.Aggregates.GroupAggregate", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.OwnsMany("Groups.Domain.ValueObjects.Question", "Questions", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("ClosedQuestion")
                                .HasColumnType("bit");

                            b1.Property<bool>("ManyCorrectAnswers")
                                .HasColumnType("bit");

                            b1.Property<Guid>("TestAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("TestAggregateId");

                            b1.ToTable("Question");

                            b1.WithOwner()
                                .HasForeignKey("TestAggregateId");

                            b1.OwnsOne("Core.Domain.ValueObjects.Photo", "Photo", b2 =>
                                {
                                    b2.Property<Guid>("QuestionId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<byte[]>("Image")
                                        .HasColumnType("varbinary(max)")
                                        .HasColumnName("Photo");

                                    b2.HasKey("QuestionId");

                                    b2.ToTable("Question");

                                    b2.WithOwner()
                                        .HasForeignKey("QuestionId");
                                });

                            b1.OwnsMany("Groups.Domain.ValueObjects.Answer", "Answers", b2 =>
                                {
                                    b2.Property<Guid?>("QuestionId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<bool>("Correct")
                                        .HasColumnType("bit");

                                    b2.HasKey("QuestionId", "Value", "Correct");

                                    b2.ToTable("Answer");

                                    b2.WithOwner()
                                        .HasForeignKey("QuestionId");
                                });

                            b1.Navigation("Answers");

                            b1.Navigation("Photo");
                        });

                    b.Navigation("Group");

                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
